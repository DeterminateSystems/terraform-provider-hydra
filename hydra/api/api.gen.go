// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/pkg/errors"
)

// Build defines model for Build.
type Build struct {

	// user defined build metrics from `$out/nix-support/hydra-metrics`. The file should
	// define metrics separated by new lines using the following format:
	//
	// ```
	// <name> <value>[ <unit>]
	// ```
	// The name and unit fields are strings, the value is a float. The unit is optional.
	Buildmetrics *struct {

		// name of the measured build metric
		Name *string `json:"name,omitempty"`

		// unit of the measured build metric
		Unit *string `json:"unit,omitempty"`

		// measured value
		Value *string `json:"value,omitempty"`
	} `json:"buildmetrics,omitempty"`
	Buildoutputs  *Build_Buildoutputs  `json:"buildoutputs,omitempty"`
	Buildproducts *Build_Buildproducts `json:"buildproducts,omitempty"`

	// Indicates the build status:</br>
	// <ul>
	//  <li>0 : succeeded</li>
	//  <li>1 : failed</li>
	//  <li>2 : dependency failed</li>
	//  <li>3 : aborted</li>
	//  <li>4 : canceled by the user</li>
	//  <li>6 : failed with output</li>
	//  <li>7 : timed out</li>
	//  <li>9 : aborted</li>
	//  <li>10 : log size limit exceeded</li>
	//  <li>11 : output size limit exceeded</li>
	//  <li>*  : failed</li>
	// </ul>
	// <strong>Note:</strong>buildstatus should only be `null` if `finished` is false.
	Buildstatus *int `json:"buildstatus"`

	// filename of the drv
	Drvpath *string `json:"drvpath,omitempty"`

	// true when the build is finished
	Finished *bool `json:"finished,omitempty"`
	Id       *int  `json:"id,omitempty"`

	// nix attribute from the nixexprpath
	Job *string `json:"job,omitempty"`

	// jobset this build belongs to
	Jobset *string `json:"jobset,omitempty"`

	// list of evaluations this build is part of
	Jobsetevals *[]int `json:"jobsetevals,omitempty"`

	// name from the build's derivation
	Nixname *string `json:"nixname,omitempty"`

	// determines the priority with which this build will be executed (higher value means higher priority)
	Priority *int `json:"priority,omitempty"`

	// project this build belongs to
	Project *string `json:"project,omitempty"`

	// time when build started
	Starttime *int `json:"starttime,omitempty"`

	// time when build ended
	Stoptime *int `json:"stoptime,omitempty"`

	// system this build was done for
	System *string `json:"system,omitempty"`

	// time when the build was first created
	Timestamp *int `json:"timestamp,omitempty"`
}

// Build_Buildoutputs defines model for Build.Buildoutputs.
type Build_Buildoutputs struct {
	AdditionalProperties map[string]BuildOutput `json:"-"`
}

// Build_Buildproducts defines model for Build.Buildproducts.
type Build_Buildproducts struct {
	AdditionalProperties map[string]BuildProduct `json:"-"`
}

// BuildOutput defines model for BuildOutput.
type BuildOutput struct {

	// The nix store path
	Path *string `json:"path,omitempty"`
}

// BuildProduct defines model for BuildProduct.
type BuildProduct struct {

	// This is a Git/Mercurial commit hash or a Subversion revision number
	Defaultpath *string `json:"defaultpath,omitempty"`

	// Size of the produced file
	Filesize *int `json:"filesize"`

	// Name of the file
	Name *string `json:"name,omitempty"`

	// the nix store path
	Path *string `json:"path,omitempty"`

	// sha256 hash of the file
	Sha256hash *string `json:"sha256hash"`

	// user-specified
	Subtype *string `json:"subtype,omitempty"`

	// Types of build product (user defined)
	Type *string `json:"type,omitempty"`
}

// Error defines model for Error.
type Error struct {

	// error message
	Error *string `json:"error,omitempty"`
}

// Evaluations defines model for Evaluations.
type Evaluations struct {

	// List of evaluations
	Evals *[]struct {
		AdditionalProperties map[string]JobsetEval `json:"-"`
	} `json:"evals,omitempty"`

	// first list of results
	First *string `json:"first,omitempty"`

	// last list of results
	Last *string `json:"last,omitempty"`

	// next list of results
	Next *string `json:"next,omitempty"`
}

// Jobset defines model for Jobset.
type Jobset struct {

	// email address to send notices to instead of the package maintainer (can be a comma separated list)
	Emailoverride *string `json:"emailoverride,omitempty"`

	// when set to true the jobset gets scheduled for evaluation
	Enabled *bool `json:"enabled,omitempty"`

	// contains the stderr output of the nix-instantiate command
	Errormsg *string `json:"errormsg,omitempty"`

	// contains the error message when there was a problem fetching sources for a jobset
	Fetcherrormsg *string `json:"fetcherrormsg"`

	// inputs configured for this jobset
	Jobsetinputs *Jobset_Jobsetinputs `json:"jobsetinputs,omitempty"`

	// the name of the jobset input which contains the nixexprpath
	Nixexprinput *string `json:"nixexprinput,omitempty"`

	// the path to the file to evaluate
	Nixexprpath *string `json:"nixexprpath"`
}

// inputs configured for this jobset
type Jobset_Jobsetinputs struct {
	AdditionalProperties map[string]JobsetInput `json:"-"`
}

// JobsetEval defines model for JobsetEval.
type JobsetEval struct {

	// List of builds generated for this jobset evaluation
	Builds *[]int `json:"builds,omitempty"`

	// is true if the number of JobsetEval members is different from the prior evaluation. (will always be true on the first evaluation)
	Hasnewbuilds     *bool                        `json:"hasnewbuilds,omitempty"`
	Id               *int                         `json:"id,omitempty"`
	Jobsetevalinputs *JobsetEval_Jobsetevalinputs `json:"jobsetevalinputs,omitempty"`
}

// JobsetEval_Jobsetevalinputs defines model for JobsetEval.Jobsetevalinputs.
type JobsetEval_Jobsetevalinputs struct {
	AdditionalProperties map[string]JobsetEvalInput `json:"-"`
}

// JobsetEvalInput defines model for JobsetEvalInput.
type JobsetEvalInput struct {

	// **Deprecated**: The build id of another build
	Dependency *string `json:"dependency"`

	// A Git/Mercurial commit hash or a Subversion revision number.
	Revision *string `json:"revision"`

	// The type of this input
	Type *string `json:"type,omitempty"`

	// URI of this input (which differs depending on the type of the input)
	Uri *string `json:"uri"`

	// A value that corresponds to the type of input
	Value *interface{} `json:"value"`
}

// JobsetInput defines model for JobsetInput.
type JobsetInput struct {

	// ???
	Jobsetinputalts *[]string `json:"jobsetinputalts,omitempty"`
}

// JobsetOverview defines model for JobsetOverview.
type JobsetOverview []struct {

	// interval in seconds at which to check the jobset inputs
	Checkinterval *int `json:"checkinterval,omitempty"`

	// time an error occurred during evaluation (unix time stamp)
	Errortime *int `json:"errortime,omitempty"`

	// contains the error message when there was a problem fetching sources for a jobset
	Fetcherrormsg *interface{} `json:"fetcherrormsg"`

	// true if the evaluation had errors
	Haserrormsg *bool `json:"haserrormsg,omitempty"`

	// the last time the jobset inputs where checked to see if an evaluation needs to be scheduled (unix time stamp)
	Lastcheckedtime *int `json:"lastcheckedtime,omitempty"`

	// name of the jobset
	Name *string `json:"name,omitempty"`

	// number of failed evaluations
	Nrfailed *int `json:"nrfailed,omitempty"`

	// number of scheduled evaluations
	Nrscheduled *int `json:"nrscheduled,omitempty"`

	// number of evaluations
	Nrtotal *int `json:"nrtotal,omitempty"`

	// name of the project
	Project *string `json:"project,omitempty"`

	// time when build started
	Starttime *int `json:"starttime"`

	// time of the last evaluation trigger for this jobset (unix time stamp)
	Triggertime *int `json:"triggertime"`
}

// Project defines model for Project.
type Project struct {

	// description of the project
	Description *string `json:"description,omitempty"`

	// name to be displayed in the web interface
	Displayname *string `json:"displayname,omitempty"`

	// when set to true the project gets scheduled for evaluation
	Enabled *bool `json:"enabled,omitempty"`

	// when set to true the project is not displayed in the web interface
	Hidden *bool `json:"hidden,omitempty"`

	// list of jobsets belonging to this project
	Jobsets *[]string `json:"jobsets,omitempty"`

	// name of the project
	Name *string `json:"name,omitempty"`

	// username of the project owner
	Owner *string `json:"owner,omitempty"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {

	// builds matching search term
	Builds *[]Build `json:"builds,omitempty"`

	// derivations matching search term
	Buildsdrv *[]Build `json:"buildsdrv,omitempty"`

	// jobsets matching search term
	Jobsets *[]Jobset `json:"jobsets,omitempty"`

	// projects missing search term
	Projects *[]Project `json:"projects,omitempty"`
}

// GetApiJobsetsParams defines parameters for GetApiJobsets.
type GetApiJobsetsParams struct {

	// name of the project
	Project *string `json:"project,omitempty"`
}

// PutApiPushParams defines parameters for PutApiPush.
type PutApiPushParams struct {

	// project and jobset formatted as "<project>:<jobset>" to evaluate
	Jobsets *string `json:"jobsets,omitempty"`
}

// PutJobsetProjectIdJobsetIdJSONBody defines parameters for PutJobsetProjectIdJobsetId.
type PutJobsetProjectIdJobsetIdJSONBody struct {

	// interval (in seconds) in which to check for evaluation
	Checkinterval *int `json:"checkinterval,omitempty"`

	// a description of the jobset
	Description *string `json:"description,omitempty"`

	// when true the jobset gets scheduled for evaluation
	Enabled *bool `json:"enabled,omitempty"`

	// inputs for this jobset
	Inputs *PutJobsetProjectIdJobsetIdJSONBody_Inputs `json:"inputs,omitempty"`

	// number or evaluations to keep
	Keepnr *int `json:"keepnr,omitempty"`

	// the name of the jobset input which contains the nixexprpath
	Nixexprinput *string `json:"nixexprinput,omitempty"`

	// the path to the file to evaluate
	Nixexprpath *string `json:"nixexprpath"`

	// when true the jobset is visible in the web frontend
	Visible *bool `json:"visible,omitempty"`
}

// PutJobsetProjectIdJobsetIdJSONBody_Inputs defines parameters for PutJobsetProjectIdJobsetId.
type PutJobsetProjectIdJobsetIdJSONBody_Inputs struct {
	AdditionalProperties map[string]JobsetInput `json:"-"`
}

// PostLoginJSONBody defines parameters for PostLogin.
type PostLoginJSONBody struct {

	// password
	Password *string `json:"password,omitempty"`

	// user
	Username *string `json:"username,omitempty"`
}

// PutProjectIdJSONBody defines parameters for PutProjectId.
type PutProjectIdJSONBody struct {

	// description of the project
	Description *string `json:"description,omitempty"`

	// name of the project
	Displayname *string `json:"displayname,omitempty"`

	// when set to true the project gets scheduled for evaluation
	Enabled *bool `json:"enabled,omitempty"`

	// when set to true the project is displayed in the web interface
	Hidden *bool `json:"hidden,omitempty"`

	// homepage of the project
	Homepage *string `json:"homepage,omitempty"`

	// owner of the project
	Owner *string `json:"owner,omitempty"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {

	// string to search for
	Query *string `json:"query,omitempty"`
}

// PutJobsetProjectIdJobsetIdJSONRequestBody defines body for PutJobsetProjectIdJobsetId for application/json ContentType.
type PutJobsetProjectIdJobsetIdJSONRequestBody PutJobsetProjectIdJobsetIdJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody PostLoginJSONBody

// PutProjectIdJSONRequestBody defines body for PutProjectId for application/json ContentType.
type PutProjectIdJSONRequestBody PutProjectIdJSONBody

// Getter for additional properties for PutJobsetProjectIdJobsetIdJSONBody_Inputs. Returns the specified
// element and whether it was found
func (a PutJobsetProjectIdJobsetIdJSONBody_Inputs) Get(fieldName string) (value JobsetInput, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PutJobsetProjectIdJobsetIdJSONBody_Inputs
func (a *PutJobsetProjectIdJobsetIdJSONBody_Inputs) Set(fieldName string, value JobsetInput) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]JobsetInput)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PutJobsetProjectIdJobsetIdJSONBody_Inputs to handle AdditionalProperties
func (a *PutJobsetProjectIdJobsetIdJSONBody_Inputs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]JobsetInput)
		for fieldName, fieldBuf := range object {
			var fieldVal JobsetInput
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PutJobsetProjectIdJobsetIdJSONBody_Inputs to handle AdditionalProperties
func (a PutJobsetProjectIdJobsetIdJSONBody_Inputs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Build_Buildoutputs. Returns the specified
// element and whether it was found
func (a Build_Buildoutputs) Get(fieldName string) (value BuildOutput, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Build_Buildoutputs
func (a *Build_Buildoutputs) Set(fieldName string, value BuildOutput) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]BuildOutput)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Build_Buildoutputs to handle AdditionalProperties
func (a *Build_Buildoutputs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]BuildOutput)
		for fieldName, fieldBuf := range object {
			var fieldVal BuildOutput
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Build_Buildoutputs to handle AdditionalProperties
func (a Build_Buildoutputs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Build_Buildproducts. Returns the specified
// element and whether it was found
func (a Build_Buildproducts) Get(fieldName string) (value BuildProduct, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Build_Buildproducts
func (a *Build_Buildproducts) Set(fieldName string, value BuildProduct) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]BuildProduct)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Build_Buildproducts to handle AdditionalProperties
func (a *Build_Buildproducts) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]BuildProduct)
		for fieldName, fieldBuf := range object {
			var fieldVal BuildProduct
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Build_Buildproducts to handle AdditionalProperties
func (a Build_Buildproducts) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Jobset_Jobsetinputs. Returns the specified
// element and whether it was found
func (a Jobset_Jobsetinputs) Get(fieldName string) (value JobsetInput, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Jobset_Jobsetinputs
func (a *Jobset_Jobsetinputs) Set(fieldName string, value JobsetInput) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]JobsetInput)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Jobset_Jobsetinputs to handle AdditionalProperties
func (a *Jobset_Jobsetinputs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]JobsetInput)
		for fieldName, fieldBuf := range object {
			var fieldVal JobsetInput
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Jobset_Jobsetinputs to handle AdditionalProperties
func (a Jobset_Jobsetinputs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for JobsetEval_Jobsetevalinputs. Returns the specified
// element and whether it was found
func (a JobsetEval_Jobsetevalinputs) Get(fieldName string) (value JobsetEvalInput, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JobsetEval_Jobsetevalinputs
func (a *JobsetEval_Jobsetevalinputs) Set(fieldName string, value JobsetEvalInput) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]JobsetEvalInput)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JobsetEval_Jobsetevalinputs to handle AdditionalProperties
func (a *JobsetEval_Jobsetevalinputs) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]JobsetEvalInput)
		for fieldName, fieldBuf := range object {
			var fieldVal JobsetEvalInput
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JobsetEval_Jobsetevalinputs to handle AdditionalProperties
func (a JobsetEval_Jobsetevalinputs) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiJobsets request
	GetApiJobsets(ctx context.Context, params *GetApiJobsetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiPush request
	PutApiPush(ctx context.Context, params *PutApiPushParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBuildBuildId request
	GetBuildBuildId(ctx context.Context, buildId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvalBuildId request
	GetEvalBuildId(ctx context.Context, buildId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobProjectIdJobsetIdJobIdShield request
	GetJobProjectIdJobsetIdJobIdShield(ctx context.Context, projectId string, jobsetId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsetProjectIdJobsetId request
	GetJobsetProjectIdJobsetId(ctx context.Context, projectId string, jobsetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutJobsetProjectIdJobsetId request  with any body
	PutJobsetProjectIdJobsetIdWithBody(ctx context.Context, projectId string, jobsetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutJobsetProjectIdJobsetId(ctx context.Context, projectId string, jobsetId string, body PutJobsetProjectIdJobsetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsetProjectIdJobsetIdEvals request
	GetJobsetProjectIdJobsetIdEvals(ctx context.Context, projectId string, jobsetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogin request  with any body
	PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectId request
	GetProjectId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProjectId request  with any body
	PutProjectIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProjectId(ctx context.Context, id string, body PutProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearch request
	GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiJobsets(ctx context.Context, params *GetApiJobsetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiJobsetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiPush(ctx context.Context, params *PutApiPushParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiPushRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBuildBuildId(ctx context.Context, buildId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBuildBuildIdRequest(c.Server, buildId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvalBuildId(ctx context.Context, buildId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEvalBuildIdRequest(c.Server, buildId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobProjectIdJobsetIdJobIdShield(ctx context.Context, projectId string, jobsetId string, jobId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobProjectIdJobsetIdJobIdShieldRequest(c.Server, projectId, jobsetId, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsetProjectIdJobsetId(ctx context.Context, projectId string, jobsetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsetProjectIdJobsetIdRequest(c.Server, projectId, jobsetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobsetProjectIdJobsetIdWithBody(ctx context.Context, projectId string, jobsetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobsetProjectIdJobsetIdRequestWithBody(c.Server, projectId, jobsetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutJobsetProjectIdJobsetId(ctx context.Context, projectId string, jobsetId string, body PutJobsetProjectIdJobsetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutJobsetProjectIdJobsetIdRequest(c.Server, projectId, jobsetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsetProjectIdJobsetIdEvals(ctx context.Context, projectId string, jobsetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsetProjectIdJobsetIdEvalsRequest(c.Server, projectId, jobsetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectIdWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProjectId(ctx context.Context, id string, body PutProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProjectIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearch(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiJobsetsRequest generates requests for GetApiJobsets
func NewGetApiJobsetsRequest(server string, params *GetApiJobsetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/jobsets")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Project != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project", runtime.ParamLocationQuery, *params.Project); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiPushRequest generates requests for PutApiPush
func NewPutApiPushRequest(server string, params *PutApiPushParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/push")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Jobsets != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "jobsets", runtime.ParamLocationQuery, *params.Jobsets); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBuildBuildIdRequest generates requests for GetBuildBuildId
func NewGetBuildBuildIdRequest(server string, buildId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "build-id", runtime.ParamLocationPath, buildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/build/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEvalBuildIdRequest generates requests for GetEvalBuildId
func NewGetEvalBuildIdRequest(server string, buildId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "build-id", runtime.ParamLocationPath, buildId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/eval/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobProjectIdJobsetIdJobIdShieldRequest generates requests for GetJobProjectIdJobsetIdJobIdShield
func NewGetJobProjectIdJobsetIdJobIdShieldRequest(server string, projectId string, jobsetId string, jobId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobset-id", runtime.ParamLocationPath, jobsetId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "job-id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/job/%s/%s/%s/shield", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsetProjectIdJobsetIdRequest generates requests for GetJobsetProjectIdJobsetId
func NewGetJobsetProjectIdJobsetIdRequest(server string, projectId string, jobsetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobset-id", runtime.ParamLocationPath, jobsetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobset/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutJobsetProjectIdJobsetIdRequest calls the generic PutJobsetProjectIdJobsetId builder with application/json body
func NewPutJobsetProjectIdJobsetIdRequest(server string, projectId string, jobsetId string, body PutJobsetProjectIdJobsetIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutJobsetProjectIdJobsetIdRequestWithBody(server, projectId, jobsetId, "application/json", bodyReader)
}

// NewPutJobsetProjectIdJobsetIdRequestWithBody generates requests for PutJobsetProjectIdJobsetId with any type of body
func NewPutJobsetProjectIdJobsetIdRequestWithBody(server string, projectId string, jobsetId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobset-id", runtime.ParamLocationPath, jobsetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobset/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobsetProjectIdJobsetIdEvalsRequest generates requests for GetJobsetProjectIdJobsetIdEvals
func NewGetJobsetProjectIdJobsetIdEvalsRequest(server string, projectId string, jobsetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project-id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "jobset-id", runtime.ParamLocationPath, jobsetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobset/%s/%s/evals", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLoginRequest calls the generic PostLogin builder with application/json body
func NewPostLoginRequest(server string, body PostLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProjectIdRequest generates requests for GetProjectId
func NewGetProjectIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProjectIdRequest calls the generic PutProjectId builder with application/json body
func NewPutProjectIdRequest(server string, id string, body PutProjectIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProjectIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutProjectIdRequestWithBody generates requests for PutProjectId with any type of body
func NewPutProjectIdRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/project/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSearchRequest generates requests for GetSearch
func NewGetSearchRequest(server string, params *GetSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search")
	if operationPath[0] == '/' {
		operationPath = operationPath[1:]
	}
	operationURL := url.URL{
		Path: operationPath,
	}

	queryURL := serverURL.ResolveReference(&operationURL)

	queryValues := queryURL.Query()

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Get request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetApiJobsets request
	GetApiJobsetsWithResponse(ctx context.Context, params *GetApiJobsetsParams, reqEditors ...RequestEditorFn) (*GetApiJobsetsResponse, error)

	// PutApiPush request
	PutApiPushWithResponse(ctx context.Context, params *PutApiPushParams, reqEditors ...RequestEditorFn) (*PutApiPushResponse, error)

	// GetBuildBuildId request
	GetBuildBuildIdWithResponse(ctx context.Context, buildId int, reqEditors ...RequestEditorFn) (*GetBuildBuildIdResponse, error)

	// GetEvalBuildId request
	GetEvalBuildIdWithResponse(ctx context.Context, buildId int, reqEditors ...RequestEditorFn) (*GetEvalBuildIdResponse, error)

	// GetJobProjectIdJobsetIdJobIdShield request
	GetJobProjectIdJobsetIdJobIdShieldWithResponse(ctx context.Context, projectId string, jobsetId string, jobId string, reqEditors ...RequestEditorFn) (*GetJobProjectIdJobsetIdJobIdShieldResponse, error)

	// GetJobsetProjectIdJobsetId request
	GetJobsetProjectIdJobsetIdWithResponse(ctx context.Context, projectId string, jobsetId string, reqEditors ...RequestEditorFn) (*GetJobsetProjectIdJobsetIdResponse, error)

	// PutJobsetProjectIdJobsetId request  with any body
	PutJobsetProjectIdJobsetIdWithBodyWithResponse(ctx context.Context, projectId string, jobsetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobsetProjectIdJobsetIdResponse, error)

	PutJobsetProjectIdJobsetIdWithResponse(ctx context.Context, projectId string, jobsetId string, body PutJobsetProjectIdJobsetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobsetProjectIdJobsetIdResponse, error)

	// GetJobsetProjectIdJobsetIdEvals request
	GetJobsetProjectIdJobsetIdEvalsWithResponse(ctx context.Context, projectId string, jobsetId string, reqEditors ...RequestEditorFn) (*GetJobsetProjectIdJobsetIdEvalsResponse, error)

	// PostLogin request  with any body
	PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// GetProjectId request
	GetProjectIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProjectIdResponse, error)

	// PutProjectId request  with any body
	PutProjectIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectIdResponse, error)

	PutProjectIdWithResponse(ctx context.Context, id string, body PutProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectIdResponse, error)

	// GetSearch request
	GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiJobsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobsetOverview
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiJobsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiJobsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiPushResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		JobsetsTriggered *[]string `json:"jobsetsTriggered,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutApiPushResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiPushResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBuildBuildIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Build
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetBuildBuildIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBuildBuildIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEvalBuildIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobsetEval
}

// Status returns HTTPResponse.Status
func (r GetEvalBuildIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEvalBuildIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobProjectIdJobsetIdJobIdShieldResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJobProjectIdJobsetIdJobIdShieldResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobProjectIdJobsetIdJobIdShieldResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsetProjectIdJobsetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Jobset
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetJobsetProjectIdJobsetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsetProjectIdJobsetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutJobsetProjectIdJobsetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// url pointing to the webui for the created jobset
		Redirect *string `json:"redirect,omitempty"`
	}
	JSON201 *struct {

		// name of the created jobset
		Name *string `json:"name,omitempty"`

		// url pointing to the webui for the created jobset
		Redirect *string `json:"redirect,omitempty"`

		// Set to "jobset"
		Type *string `json:"type,omitempty"`

		// url to the created jobset
		Uri *string `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutJobsetProjectIdJobsetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutJobsetProjectIdJobsetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsetProjectIdJobsetIdEvalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Evaluations
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetJobsetProjectIdJobsetIdEvalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsetProjectIdJobsetIdEvalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// email
		Emailaddress *string `json:"emailaddress,omitempty"`

		// full name
		Fullname *string `json:"fullname,omitempty"`

		// user
		Username *string `json:"username,omitempty"`

		// user roles
		Userroles *[]string `json:"userroles,omitempty"`
	}
	JSON403 *Error
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {

		// URL of the created project
		Redirect *string `json:"redirect,omitempty"`
	}
	JSON201 *struct {

		// name of the project
		Name *string `json:"name,omitempty"`

		// URL of the created project
		Redirect *string `json:"redirect,omitempty"`

		// type of the created resource ("project")
		Type *string `json:"type,omitempty"`

		// URL of the created project
		Uri *string `json:"uri,omitempty"`
	}
	JSON400 *struct {

		// error message
		Error *string `json:"error,omitempty"`
	}
	JSON403 *struct {

		// error message
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PutProjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResult
	JSON500      *struct {

		// error message
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetApiJobsetsWithResponse request returning *GetApiJobsetsResponse
func (c *ClientWithResponses) GetApiJobsetsWithResponse(ctx context.Context, params *GetApiJobsetsParams, reqEditors ...RequestEditorFn) (*GetApiJobsetsResponse, error) {
	rsp, err := c.GetApiJobsets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiJobsetsResponse(rsp)
}

// PutApiPushWithResponse request returning *PutApiPushResponse
func (c *ClientWithResponses) PutApiPushWithResponse(ctx context.Context, params *PutApiPushParams, reqEditors ...RequestEditorFn) (*PutApiPushResponse, error) {
	rsp, err := c.PutApiPush(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiPushResponse(rsp)
}

// GetBuildBuildIdWithResponse request returning *GetBuildBuildIdResponse
func (c *ClientWithResponses) GetBuildBuildIdWithResponse(ctx context.Context, buildId int, reqEditors ...RequestEditorFn) (*GetBuildBuildIdResponse, error) {
	rsp, err := c.GetBuildBuildId(ctx, buildId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBuildBuildIdResponse(rsp)
}

// GetEvalBuildIdWithResponse request returning *GetEvalBuildIdResponse
func (c *ClientWithResponses) GetEvalBuildIdWithResponse(ctx context.Context, buildId int, reqEditors ...RequestEditorFn) (*GetEvalBuildIdResponse, error) {
	rsp, err := c.GetEvalBuildId(ctx, buildId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEvalBuildIdResponse(rsp)
}

// GetJobProjectIdJobsetIdJobIdShieldWithResponse request returning *GetJobProjectIdJobsetIdJobIdShieldResponse
func (c *ClientWithResponses) GetJobProjectIdJobsetIdJobIdShieldWithResponse(ctx context.Context, projectId string, jobsetId string, jobId string, reqEditors ...RequestEditorFn) (*GetJobProjectIdJobsetIdJobIdShieldResponse, error) {
	rsp, err := c.GetJobProjectIdJobsetIdJobIdShield(ctx, projectId, jobsetId, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobProjectIdJobsetIdJobIdShieldResponse(rsp)
}

// GetJobsetProjectIdJobsetIdWithResponse request returning *GetJobsetProjectIdJobsetIdResponse
func (c *ClientWithResponses) GetJobsetProjectIdJobsetIdWithResponse(ctx context.Context, projectId string, jobsetId string, reqEditors ...RequestEditorFn) (*GetJobsetProjectIdJobsetIdResponse, error) {
	rsp, err := c.GetJobsetProjectIdJobsetId(ctx, projectId, jobsetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsetProjectIdJobsetIdResponse(rsp)
}

// PutJobsetProjectIdJobsetIdWithBodyWithResponse request with arbitrary body returning *PutJobsetProjectIdJobsetIdResponse
func (c *ClientWithResponses) PutJobsetProjectIdJobsetIdWithBodyWithResponse(ctx context.Context, projectId string, jobsetId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutJobsetProjectIdJobsetIdResponse, error) {
	rsp, err := c.PutJobsetProjectIdJobsetIdWithBody(ctx, projectId, jobsetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobsetProjectIdJobsetIdResponse(rsp)
}

func (c *ClientWithResponses) PutJobsetProjectIdJobsetIdWithResponse(ctx context.Context, projectId string, jobsetId string, body PutJobsetProjectIdJobsetIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutJobsetProjectIdJobsetIdResponse, error) {
	rsp, err := c.PutJobsetProjectIdJobsetId(ctx, projectId, jobsetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutJobsetProjectIdJobsetIdResponse(rsp)
}

// GetJobsetProjectIdJobsetIdEvalsWithResponse request returning *GetJobsetProjectIdJobsetIdEvalsResponse
func (c *ClientWithResponses) GetJobsetProjectIdJobsetIdEvalsWithResponse(ctx context.Context, projectId string, jobsetId string, reqEditors ...RequestEditorFn) (*GetJobsetProjectIdJobsetIdEvalsResponse, error) {
	rsp, err := c.GetJobsetProjectIdJobsetIdEvals(ctx, projectId, jobsetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsetProjectIdJobsetIdEvalsResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

func (c *ClientWithResponses) PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// GetProjectIdWithResponse request returning *GetProjectIdResponse
func (c *ClientWithResponses) GetProjectIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetProjectIdResponse, error) {
	rsp, err := c.GetProjectId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectIdResponse(rsp)
}

// PutProjectIdWithBodyWithResponse request with arbitrary body returning *PutProjectIdResponse
func (c *ClientWithResponses) PutProjectIdWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProjectIdResponse, error) {
	rsp, err := c.PutProjectIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectIdResponse(rsp)
}

func (c *ClientWithResponses) PutProjectIdWithResponse(ctx context.Context, id string, body PutProjectIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProjectIdResponse, error) {
	rsp, err := c.PutProjectId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProjectIdResponse(rsp)
}

// GetSearchWithResponse request returning *GetSearchResponse
func (c *ClientWithResponses) GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors ...RequestEditorFn) (*GetSearchResponse, error) {
	rsp, err := c.GetSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchResponse(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiJobsetsResponse parses an HTTP response from a GetApiJobsetsWithResponse call
func ParseGetApiJobsetsResponse(rsp *http.Response) (*GetApiJobsetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetApiJobsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobsetOverview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutApiPushResponse parses an HTTP response from a PutApiPushWithResponse call
func ParsePutApiPushResponse(rsp *http.Response) (*PutApiPushResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutApiPushResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			JobsetsTriggered *[]string `json:"jobsetsTriggered,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBuildBuildIdResponse parses an HTTP response from a GetBuildBuildIdWithResponse call
func ParseGetBuildBuildIdResponse(rsp *http.Response) (*GetBuildBuildIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBuildBuildIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Build
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEvalBuildIdResponse parses an HTTP response from a GetEvalBuildIdWithResponse call
func ParseGetEvalBuildIdResponse(rsp *http.Response) (*GetEvalBuildIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEvalBuildIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobsetEval
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobProjectIdJobsetIdJobIdShieldResponse parses an HTTP response from a GetJobProjectIdJobsetIdJobIdShieldWithResponse call
func ParseGetJobProjectIdJobsetIdJobIdShieldResponse(rsp *http.Response) (*GetJobProjectIdJobsetIdJobIdShieldResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJobProjectIdJobsetIdJobIdShieldResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetJobsetProjectIdJobsetIdResponse parses an HTTP response from a GetJobsetProjectIdJobsetIdWithResponse call
func ParseGetJobsetProjectIdJobsetIdResponse(rsp *http.Response) (*GetJobsetProjectIdJobsetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJobsetProjectIdJobsetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Jobset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutJobsetProjectIdJobsetIdResponse parses an HTTP response from a PutJobsetProjectIdJobsetIdWithResponse call
func ParsePutJobsetProjectIdJobsetIdResponse(rsp *http.Response) (*PutJobsetProjectIdJobsetIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutJobsetProjectIdJobsetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// url pointing to the webui for the created jobset
			Redirect *string `json:"redirect,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {

			// name of the created jobset
			Name *string `json:"name,omitempty"`

			// url pointing to the webui for the created jobset
			Redirect *string `json:"redirect,omitempty"`

			// Set to "jobset"
			Type *string `json:"type,omitempty"`

			// url to the created jobset
			Uri *string `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetJobsetProjectIdJobsetIdEvalsResponse parses an HTTP response from a GetJobsetProjectIdJobsetIdEvalsWithResponse call
func ParseGetJobsetProjectIdJobsetIdEvalsResponse(rsp *http.Response) (*GetJobsetProjectIdJobsetIdEvalsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetJobsetProjectIdJobsetIdEvalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Evaluations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// email
			Emailaddress *string `json:"emailaddress,omitempty"`

			// full name
			Fullname *string `json:"fullname,omitempty"`

			// user
			Username *string `json:"username,omitempty"`

			// user roles
			Userroles *[]string `json:"userroles,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetProjectIdResponse parses an HTTP response from a GetProjectIdWithResponse call
func ParseGetProjectIdResponse(rsp *http.Response) (*GetProjectIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutProjectIdResponse parses an HTTP response from a PutProjectIdWithResponse call
func ParsePutProjectIdResponse(rsp *http.Response) (*PutProjectIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutProjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {

			// URL of the created project
			Redirect *string `json:"redirect,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {

			// name of the project
			Name *string `json:"name,omitempty"`

			// URL of the created project
			Redirect *string `json:"redirect,omitempty"`

			// type of the created resource ("project")
			Type *string `json:"type,omitempty"`

			// URL of the created project
			Uri *string `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {

			// error message
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {

			// error message
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetSearchResponse parses an HTTP response from a GetSearchWithResponse call
func ParseGetSearchResponse(rsp *http.Response) (*GetSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {

			// error message
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
